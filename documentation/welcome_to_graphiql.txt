# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that start
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)
#
#     Merge Query:  Shift-Ctrl-M (or press the merge button above)
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

query {
 	book(id:2) {
    name
    genre
    author{
      name
      age
      id
    }
  }
}

{
  author(id: 2) {
    name
    age
    books {
      id
    	name
    }
  }
}

{
  books{
    name
    genre
  }
}

{
  books{
    name
    genre
    author{
      name 
      age
    }
  }
}

// mutation query
// standard syntax:
'''
mutation {
  myFunc(argkey1: "Value1", argkey2: "Value2")Â {
    argkey1
    argkey2
  }
}
''' 


''' first create your mutation for instance:'''
mutation 
{ 
  addAuthor(name: "Benjamin_Appelberg", age: 25){
    name 
    age
  }
}

addAuthor is an post method.

Feeling Is the Secret (1944) by Neville Goddard
''' addBook() '''

mutation {
  addBook(name: "Feeling_Is_the_Secret", genre: "Feeling-Spirit",authorId: "626faa3035a66c36c3ca5a25"){
    name
    genre
  }
}